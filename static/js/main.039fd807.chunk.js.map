{"version":3,"sources":["components/RandomButton/RandomButton.js","actions/Quotes.js","components/Loading/Loading.js","components/Quote/Quote.js","components/ErrorCard/ErrorCard.js","components/AuthorQuotes/AuthorQuotes.js","components/AuthorButton/AuthorButton.js","components/RandomQuote.js/RandomQuote.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["RandomButton","onClick","className","API_URL","API_VERSION","getRandomQuote","Promise","resolve","reject","fetch","then","res","json","data","catch","error","Loading","text","Quote","quote","ErrorCard","window","location","reload","role","alt","xmlns","width","height","viewBox","d","AuthorQuotes","reloadCount","useState","hasError","setHasError","quotes","setQuotes","author","useParams","history","useHistory","getQuotes","page","limit","getAuthorQuotes","err","useEffect","length","push","quoteAuthor","to","map","quoteText","_id","AuthorButton","tag","RandomQuote","setQuote","quoteGenre","App","setReloadCount","e","basename","process","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wXAEe,SAASA,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACnC,OACI,wBAAQC,UAAU,yBAAyBD,QAASA,EAApD,oB,kBCHFE,EAAU,qCACVC,EAAc,SAEb,SAASC,IACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAIN,EAAJ,YAAeC,EAAf,mBACAM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIJ,EAAQI,EAAIE,KAAK,OAC7BC,OAAM,SAAAC,GACHP,EAAOO,S,MCRR,SAASC,EAAT,GAA4B,IAATC,EAAQ,EAARA,KAC9B,OACI,qBAAKf,UAAU,UAAf,SACI,iCACKe,EADL,W,MCHG,SAASC,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAC5B,OACI,qBAAIjB,UAAU,QAAd,mBACMiB,EADN,Y,MCFO,SAASC,IAMpB,OACI,sBAAKlB,UAAU,cAAf,UACI,sBAAMA,UAAU,iBAAhB,uDAGA,8DAGA,wBAAQA,UAAU,wBAAwBD,QAZ/B,WACfoB,OAAOC,SAASC,UAWZ,SACI,qBAAKC,KAAK,MAAMC,IAAI,wBAAwBC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAA9G,SAA0H,sBAAMC,EAAE,sS,MCRnI,SAASC,EAAT,GAAwC,IAAhBC,EAAe,EAAfA,YACnC,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACQC,EAAWC,cAAXD,OACFE,EAAUC,cAEVC,EAAY,YJAf,SAAyBJ,GAA8B,IAAtBK,EAAqB,uDAAd,EAAGC,EAAW,uDAAH,EACtD,OAAO,IAAItC,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAIN,EAAJ,YAAeC,EAAf,0BAA4CkC,EAA5C,iBAA2DK,EAA3D,kBAAyEC,IACzElC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIJ,EAAQI,EAAIE,SACxBC,OAAM,SAAAC,GACHP,EAAOO,UILf8B,CAAgBP,GACX5B,MAAK,SAAAG,GACFwB,EAAUxB,MAEbC,OAAM,SAAAgC,GACHX,GAAY,OAyBxB,OArBAY,qBAAU,WACNZ,GAAY,GAGU,IAAlBC,EAAOY,OACPN,IAIArC,IACKK,MAAK,SAAAG,GACFwB,EAAU,IACVG,EAAQS,KAAR,kBAAwBpC,EAAKqC,cAC7BR,OAEH5B,OAAM,SAAAgC,GACHX,GAAY,QAGzB,CAACH,IAGA,sBAAK9B,UAAU,SAAf,UACI,cAAC,IAAD,CAAMA,UAAU,eAAeiD,GAAG,IAAlC,0BACA,6BAAKb,IACL,qBAAIpC,UAAU,iBAAd,UAEQkC,EAAOY,OAAS,EACZZ,EAAOgB,KAAI,SAAAjC,GAAK,OACZ,cAAC,EAAD,CAAuBA,MAAK,gBAAMA,EAAMkC,UAAZ,WAAhBlC,EAAMmC,QAEtB,cAAC,EAAD,CAASrC,KAAI,mBAAcqB,EAAd,eAIjBJ,EACI,cAAC,EAAD,IAAgB,W,MC1DzB,SAASqB,EAAT,GAAwC,IAAhBjB,EAAe,EAAfA,OAAQkB,EAAO,EAAPA,IAC3C,OACI,sBAAKtD,UAAU,uBAAf,UACI,uBAAMA,UAAU,oBAAhB,UACI,sBAAMA,UAAU,aAAhB,4BAGCoC,KAEL,uBAAMpC,UAAU,mBAAhB,UACI,sBAAMA,UAAU,aAAhB,uBAGCsD,KAEL,cAAC,IAAD,CAAMtD,UAAU,oBAAoBiD,GAAE,kBAAab,GAAnD,4BAEoBA,EAFpB,kB,MCVG,SAASmB,EAAT,GAAuC,IAAhBzB,EAAe,EAAfA,YAClC,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOd,EAAP,KAAcuC,EAAd,KAeA,OAZAX,qBAAU,WACNZ,GAAY,GACZuB,EAAS,MACTrD,IACKK,MAAK,SAAAG,GACF6C,EAAS7C,MAEZC,OAAM,SAAAgC,GACHX,GAAY,QAErB,CAACH,IAGA,qCAEkB,OAAVb,EACI,qCACI,cAAC,EAAD,CAAOA,MAAK,UAAKA,EAAMkC,aACvB,cAAC,EAAD,CAAcf,OAAQnB,EAAM+B,YAAaM,IAAKrC,EAAMwC,gBAClD,cAAC,EAAD,CAAS1C,KAAK,0BAIxBiB,EACI,cAAC,EAAD,IAAgB,Q,MCJrB0B,MA1Bf,WACE,MAAsC3B,mBAAS,GAA/C,mBAAOD,EAAP,KAAoB6B,EAApB,KAEA,OACE,sBAAK3D,UAAU,MAAf,UACE,iCAKE,cAAC,EAAD,CAAcD,QAAS,SAAA6D,GAAC,OAAID,EAAe7B,EAAc,QAE3D,sBAAM,YAAU,SAAhB,SACE,eAAC,IAAD,CAAQ+B,SAAUC,0BAAlB,UACE,cAAC,IAAD,CAAOC,KAAK,kBAAkBC,OAAK,EAAnC,SACE,cAAC,EAAD,CAAclC,YAAaA,MAE7B,cAAC,IAAD,CAAOiC,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,EAAD,CAAalC,YAAaA,eCbvBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.039fd807.chunk.js","sourcesContent":["import \"./css/RandomButton.css\"\r\n\r\nexport default function RandomButton({ onClick }) {\r\n    return (\r\n        <button className=\"header__button--random\" onClick={onClick}>\r\n            random\r\n        </button>\r\n    )\r\n}","\r\nconst API_URL = \"https://quote-garden.herokuapp.com\"\r\nconst API_VERSION = \"api/v3\"\r\n\r\nexport function getRandomQuote() {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${API_URL}/${API_VERSION}/quotes/random`)\r\n            .then(res => res.json())\r\n            .then(res => resolve(res.data[0]))\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport function getAuthorQuotes(author, page = 1, limit = 5) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${API_URL}/${API_VERSION}/quotes?author=${author}&page=${page}&limit=${limit}`)\r\n            .then(res => res.json())\r\n            .then(res => resolve(res.data))\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n","import \"./css/Loading.css\"\r\n\r\nexport default function Loading({ text }) {\r\n    return (\r\n        <div className=\"loading\">\r\n            <span>\r\n                {text}...\r\n            </span>\r\n        </div>\r\n    )\r\n}","import \"./css/Quote.css\"\r\n\r\nexport default function Quote({ quote }) {\r\n    return (\r\n        <li className=\"quote\">\r\n            “{quote}”\r\n        </li>\r\n    )\r\n}","import \"./css/ErrorCard.css\"\r\n\r\nexport default function ErrorCard() {\r\n\r\n    const reloadPage = () => {\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <div className=\"error__card\">\r\n            <span className=\"error__message\">\r\n                Looks like we've encountered some issues!\r\n            </span>\r\n            <span>\r\n                Try refreshing the page...\r\n            </span>\r\n            <button className=\"error__button--reload\" onClick={reloadPage}>\r\n                <svg role=\"img\" alt=\"Click to refresh page\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M13.5 2c-5.629 0-10.212 4.436-10.475 10h-3.025l4.537 5.917 4.463-5.917h-2.975c.26-3.902 3.508-7 7.475-7 4.136 0 7.5 3.364 7.5 7.5s-3.364 7.5-7.5 7.5c-2.381 0-4.502-1.119-5.876-2.854l-1.847 2.449c1.919 2.088 4.664 3.405 7.723 3.405 5.798 0 10.5-4.702 10.5-10.5s-4.702-10.5-10.5-10.5z\" /></svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { getAuthorQuotes, getRandomQuote } from \"../../actions/Quotes\";\r\nimport Loading from \"../Loading/Loading\";\r\nimport Quote from \"../Quote/Quote\";\r\nimport ErrorCard from \"../ErrorCard/ErrorCard\";\r\nimport \"./css/AuthorQuotes.css\";\r\n\r\nexport default function AuthorQuotes({ reloadCount }) {\r\n    const [hasError, setHasError] = useState(false)\r\n    const [quotes, setQuotes] = useState([])\r\n    const { author } = useParams()\r\n    const history = useHistory()\r\n\r\n    const getQuotes = () => {\r\n        getAuthorQuotes(author)\r\n            .then(data => {\r\n                setQuotes(data)\r\n            })\r\n            .catch(err => {\r\n                setHasError(true)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setHasError(false)\r\n\r\n        //fetch list of quotes for author XXX\r\n        if (quotes.length === 0) {\r\n            getQuotes()\r\n        }\r\n        else {\r\n            //get new random author\r\n            getRandomQuote()\r\n                .then(data => {\r\n                    setQuotes([])\r\n                    history.push(`/author=${data.quoteAuthor}`)\r\n                    getQuotes()\r\n                })\r\n                .catch(err => {\r\n                    setHasError(true)\r\n                })\r\n        }\r\n    }, [reloadCount])\r\n\r\n    return (\r\n        <div className=\"author\">\r\n            <Link className=\"author__link\" to=\"/\">Random Quote</Link>\r\n            <h1>{author}</h1>\r\n            <ul className=\"author__quotes\">\r\n                {\r\n                    quotes.length > 0 ?\r\n                        quotes.map(quote => (\r\n                            <Quote key={quote._id} quote={`“${quote.quoteText}”`} />\r\n                        )) :\r\n                        <Loading text={`Fetching ${author}'s quotes`} />\r\n                }\r\n                {\r\n                    //display error card if hasError === true\r\n                    hasError ?\r\n                        <ErrorCard /> : null\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import { Link } from \"react-router-dom\"\r\nimport \"./css/AuthorButton.css\"\r\n\r\nexport default function AuthorButton({ author, tag }) {\r\n    return (\r\n        <div className=\"main__button--author\">\r\n            <span className=\"main__button-name\">\r\n                <span className=\"aria__text\">\r\n                    Author's name:\r\n                </span>\r\n                {author}\r\n            </span>\r\n            <span className=\"main__button-tag\">\r\n                <span className=\"aria__text\">\r\n                    Category:\r\n                </span>\r\n                {tag}\r\n            </span>\r\n            <Link className=\"main__button-link\" to={`/author=${author}`}>\r\n                {\r\n                    `View all ${author}'s quotes`\r\n                }\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport Quote from \"../Quote/Quote\"\r\nimport AuthorButton from \"../AuthorButton/AuthorButton\"\r\nimport Loading from \"../Loading/Loading\"\r\nimport { getRandomQuote } from \"../../actions/Quotes\"\r\nimport ErrorCard from \"../ErrorCard/ErrorCard\"\r\nimport \"./css/RandomQuote.css\"\r\n\r\nexport default function RandomQuote({ reloadCount }) {\r\n    const [hasError, setHasError] = useState(false)\r\n    const [quote, setQuote] = useState(null)\r\n\r\n    //fetch random quote\r\n    useEffect(() => {\r\n        setHasError(false)\r\n        setQuote(null)\r\n        getRandomQuote()\r\n            .then(data => {\r\n                setQuote(data)\r\n            })\r\n            .catch(err => {\r\n                setHasError(true)\r\n            })\r\n    }, [reloadCount])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                quote !== null ?\r\n                    <>\r\n                        <Quote quote={`${quote.quoteText}`} />\r\n                        <AuthorButton author={quote.quoteAuthor} tag={quote.quoteGenre} />\r\n                    </> : <Loading text=\"Fetching random quote\" />\r\n            }\r\n            {\r\n                //display error card if hasError === true\r\n                hasError ?\r\n                    <ErrorCard /> : null\r\n            }\r\n        </>\r\n    )\r\n}","import { useState } from \"react\";\nimport RandomButton from \"../RandomButton/RandomButton\";\nimport AuthorQuotes from \"../AuthorQuotes/AuthorQuotes\";\nimport RandomQuote from \"../RandomQuote.js/RandomQuote\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\nimport \"./css/App.css\"\n\nfunction App() {\n  const [reloadCount, setReloadCount] = useState(0)\n\n  return (\n    <div className=\"App\">\n      <header>\n        {\n          //increase reloadCount to update/reload component\n          //trigger new fetch\n        }\n        <RandomButton onClick={e => setReloadCount(reloadCount + 1)} />\n      </header>\n      <main aria-live=\"polite\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Route path=\"/author=:author\" exact>\n            <AuthorQuotes reloadCount={reloadCount} />\n          </Route>\n          <Route path=\"/\" exact>\n            <RandomQuote reloadCount={reloadCount} />\n          </Route>\n        </Router>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/reset.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}